#### SSH MENU for bottom of .bashrc ####

# Timestamp For bash history
export HISTTIMEFORMAT="%F %T "


# Variables
MENU_FILE="sshhost_menu.yaml"
PUBLIC_KEY_FILE="~/.ssh/bastion_key.pub"

function show_menu {
    echo "SSH Menu Options:"
    while IFS='' read -r line || [[ -n "$line" ]]; do
        # Skip empty lines
        [[ -z "$line" ]] && continue

        # Skip lines starting with '#' (comments)
        [[ "$line" =~ ^[[:space:]]*# ]] && continue

        # Check if the line denotes a category
        if [[ "$line" =~ ^\[([^]]+)\]$ ]]; then
            category="${BASH_REMATCH[1]}"
            echo -e "\n$category:"
        else
            # Display host under the current category
            echo "$line"
        fi
    done < "$MENU_FILE"
}


function menu_prompt {
    read -p "Enter the option number: " option
}


function is_valid_option {
    # Check if the option is a number and not a commented line
    [[ "$option" =~ ^[0-9]+ && -n "${menu_options[$option]}" ]]
}

# Function to stop the breaking of the script
function handle_interrupt {
    echo "Script interrupted. Please use the menu to exit."
}

function execute_local_terminal {
    echo "Breaking into local terminal."
    # You can add any commands needed for local terminal access here
    break  # Exit the loop for local terminal access
}

trap handle_interrupt SIGINT


while true; do
    # Display the menu
    show_menu

    # Prompt for user input
    menu_prompt

    # Read the menu options again to refresh the array
    declare -A menu_options
    while IFS='' read -r line || [[ -n "$line" ]]; do
        # Skip empty lines
        [[ -z "$line" ]] && continue

        # Skip lines starting with '#' (comments)
        [[ "$line" =~ ^[[:space:]]*# ]] && continue

        # Check if the line denotes a category
        if [[ "$line" =~ ^\[([^]]+)\]$ ]]; then
            category="${BASH_REMATCH[1]}"
        else
            # Add host under the current category to the options
            menu_options["$line"]="$category:$line"
        fi
    done < "$MENU_FILE"

    # Execute the selected option if valid, otherwise display an error
    if is_valid_option; then
        # Extract the host information from the menu option
        host_info=${menu_options[$option]}
        category=${host_info%%:*}
        host=${host_info#*:}
        # Check if the option is the secret menu item
        if [[ "$option" == "666" ]]; then
            execute_local_terminal
        # Execute the SSH command
        else
            echo "Connecting to $host in category $category"
            # You can replace the following line with your SSH command
            # ssh "$host"
            break  # Exit the loop if a valid option was selected
        fi
    else
        echo "Invalid option. Please try again."
    fi
done