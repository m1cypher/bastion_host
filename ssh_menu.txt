#### SSH MENU for bottom of .bashrc ####

# Timestamp For bash history
export HISTTIMEFORMAT="%F %T "


# Variable locations
MENU_FILE="./sshhost_menu.txt"

PUBLIC_KEY_FILE="~/.ssh/bastion_key.pub"

# Define an associative array for menu options (host_number: host_ssh_command)
function show_menu {
    echo "SSH Menu Options:"
    while IFS=':' read -r key label command; do
        # Skip commented lines
        [[ $key =~ ^[[:space:]]*# ]] && continue

        # Hide option "Superuser" from the displayed menu
        if [[ "$key" != "666" ]]; then
            echo "$key. $label"
        fi
    done < "$MENU_FILE"
}

# Function to prompt for user input
function menu_prompt {
    read -p "Enter the option number: " option
}

# Function to check if the input is valid
function is_valid_option {
    # Check if the option is a number and not a commented line
    [[ "$option" =~ ^[0-9]+ && -n "${menu_options[$option]}" && ! "${menu_options[$option]}" =~ ^[[:space:]]*# ]]
}

# Function to handle interrupt signal
function handle_interrupt {
    echo "Script interrupted. Please use the menu to exit."
}

# Trap the interrupt signal (Ctrl+C)
trap handle_interrupt SIGINT

# Main loop
while true; do
    # Display the menu
    show_menu

    # Prompt for user input
    menu_prompt

    # Read the menu options again to refresh the array
    declare -A menu_options
    while IFS=':' read -r key label command; do
        menu_options["$key"]="$label:$command"
    done < "$MENU_FILE"

    # Execute the selected option if valid, otherwise display an error
    if is_valid_option; then
        # Extract the host information from the menu option
        host_ssh_command=${menu_options[$option]#*:}
        # Execute the SSH command
        eval "$host_ssh_command"
        break  # Exit the loop if a valid option was selected
    else
        echo "Invalid option. Please try again."
    fi
done